# Config for multi-device LoRA finetuning in lora_finetune_distributed.py
# using a Qwen3 1.7B model
#
# This config assumes that you've run the following command before launching:
#   tune download Qwen/Qwen3-1.7B --output-dir /tmp/Qwen3-1.7B
#
# To launch on 2 devices, run the following command from root:
#   tune run --nproc_per_node 2 lora_finetune_distributed --config qwen3/1.7B_lora
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training:
#   tune run --nproc_per_node 2 lora_finetune_distributed --config qwen3/1.7B_lora checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config is for fine-tuning on 2+ GPUs.

model_id: qwen3/1.7b
output_dir: outputs/${model_id} # /tmp may be deleted by your system. Change it to your preference.
model_cache: model_cache/${model_id}

# Model arguments
model:
  _component_: torchtune.models.qwen3.qlora_qwen3_1_7b_instruct
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  lora_rank: 32  # higher increases accuracy and memory
  lora_alpha: 64  # usually alpha=2*rank
  lora_dropout: 0.0

# Tokenizer
tokenizer:
  _component_: torchtune.models.qwen3.qwen3_tokenizer
  path: ${model_cache}/vocab.json
  merges_file: ${model_cache}/merges.txt
  max_seq_len: null

# Checkpointer
checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${model_cache}
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}/checkpoints
  model_type: QWEN3
resume_from_checkpoint: False

# Dataset
dataset:
  _component_: torchtune.datasets.alpaca_cleaned_dataset
  packed: False  # True increases speed
shuffle: True

# Fine-tuning arguments
seed: 0
epochs: 1
max_steps_per_epoch: 2
batch_size: 2
gradient_accumulation_steps: 2  # Use to increase effective batch size
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  lr: 2e-5
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1
loss:
  _component_: torchtune.modules.loss.LinearCrossEntropyLoss

# Training env
device: cuda

# Memory management / performance
enable_activation_checkpointing: False  # True reduces memory
enable_activation_offloading: False  # True reduces memory
dtype: bf16
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
  filename: qwen3-1.7b.txt

log_every_n_steps: 1
log_peak_memory_stats: True
log_level: DEBUG  # DEBUG, WARN, etc.

debug: 
  skip_checkpoint: True
  trace: 
    enabled: False
    ignore_frozen: True
    ignore_c_function: True
    log_func_args: True
    log_func_retval: True
    log_torch: False
    dump_raw: False
    output_file: "${output_dir}/trace.json"


# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
